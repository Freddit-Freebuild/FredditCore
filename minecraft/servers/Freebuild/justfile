#!/usr/bin/env just --justfile

set dotenv-load

server_name := "Freebuild"
server_type := "paper"

screen_name := "minecraft-server" + server_name

mem_min := ${MEMORY_MIN}
mem_max := ${MEMORY_MAX}
discordsrv_token 	:= ${DISCORDSRV_TOKEN}
discordsrv_channel 	:= ${DISCORDSRV_CHANNEL}
discordsrv_console 	:= ${DISCORDSRV_CONSOLE_CHANNEL}
discordsrv_invite 	:= ${DISCORDSRV_INVITE_LINK}

wrong_server_type := @echo "${server_name} is not a ${server_type} server. Skipping."

default:
    @just --list

# Copy the latest paper-*.jar file from servers/shared into the server folder as paper.jar
copy-shared-paper-jar:
    if server_type == "paper"; then
        ls -t ../shared/paper_jars/paper-*.jar | head -n 1 | xargs -I {} cp -v {} ./paper.jar
    else
        {{wrong_server_type()}}
        @exit 1
    fi

copy-shared-plugins-folder:
    if server_type == "paper"; then
        cp -rv ../shared/plugins .
    else
        {{wrong_server_type()}}
        @exit 1
    fi

# Replace fields from the DiscordSRV config with values from .config/.env-minecraft
fix-discordsrv-config:
    if server_type == "paper"; then
        sed -i "s/BotToken: \".*/BotToken: \"${discordsrv_token}\"/" ./plugins/DiscordSRV/config.yml
        sed -i "s/Channels: {\"global\": \".*/Channels: {\"global\": \"${discordsrv_channel}\"}/" ./plugins/DiscordSRV/config.yml
        sed -i "s/DiscordConsoleChannelId: \".*/DiscordConsoleChannelId: \"${discordsrv_console}\"/" ./plugins/DiscordSRV/config.yml
        sed -i "s@DiscordInviteLink: \".*@DiscordInviteLink: \"${discordsrv_inite}\"@" ./plugins/DiscordSRV/config.yml
    else
        {{wrong_server_type()}}
        @exit 1
    fi

# Remove session.lock files from the worlds (in case of failed server shutdown)
sessionlock-clean:
	find . -name "session.lock" -delete -not -path "./plugins/*"

prepare: copy-shared-paper-jar copy-shared-plugins-folder fix-discordsrv-config sessionlock-clean

# Perform a backup of the Minecraft server based on backuplist.txt. Optional parameter: SILENT=true/false
backup:
    screen -S minecraft-backup-${server_name} -d -m \
        bash ${FREDDITCORE_DIR}/scripts/backup.sh ${FREDDITCORE_DIR}/minecraft/servers/${server_name} ${FREDDITCORE_DIR}/minecraft/backups/${server_name} ${SILENT}

# Start the Minecraft server in a screen session.
start:
    screen -S ${screen_name} -d -m \
        bash ./start.sh ${server_name} ${mem_min} ${mem_max} true
        @echo "Starting ${server_name}"

# Stop the Minecraft server's screen session
stop:
    screen -X -S ${screen_name} quit

# Execute a command from outside the Minecraft server, e.g. COMMAND="say hi" make command (requires server to be online)
command COMMAND:
    if COMMAND == ""; then
        @echo "Provide a command (e.g., COMMAND=\"say hi\" make command)"
    else
        screen -r {{screen_name}} -X stuff \
            "{{COMMAND}}^M"
    fi

# Open the minecraft server's screen session (requires server to be online)
console:
	screen -d -r ${screen_name}

# Purge Coreprotect data older than 60 days (requires server to be online)
purge-coreprotect-db BEFORE:
    if BEFORE == ""; then
        @echo "missing BEFORE parameter (e.g., 'BEFORE=60d make purge-coreprotect-db' to purge data older than 60 days)"
        @exit 1
    fi
    if server_type == "paper"; then
        screen -r {{screen_name}} -X stuff \
            "co purge t:{{BEFORE}}^M"
    else
        {{wrong_server_type()}}
        @exit 1
    fi
# ifeq (${BEFORE},)
# 	@echo "missing BEFORE parameter (e.g., 'BEFORE=60d make purge-coreprotect-db' to purge data older than 60 days)"
# 	@exit 1
# endif
# ifeq (${server_type},paper)
# 	screen -r ${screen_name} -X stuff \
# 		"co purge t:${BEFORE}^M"
# else
# 	${wrong_server_type}
# 	@exit 1
# endif
